
GPG_FILE=`ls ${GPG_DIR}/*.gpg` || { echo "err: no gpg file found."; exit 1; }
GPG_FILE=`basename ${GPG_FILE} |awk '{print $1}'`

split -b 4G ${GPG_FILE} ${GPG_FILE}_
s3cmd put ${GPG_FILE}_?? s3://my_bucket/



tar cvSf sparse_file.tar sparse_file                     # <--- tar sparse file
ssh 10.20.30.40 "tar cvf - /backup/ | gzip -c1" | gunzip -c |sudo tar xvf -

wavemon


mdadm --create /dev/md2 --level=mirror --raid-devices=2 /dev/sda1 /dev/sdb1
mdadm --detail /dev/md2


*****************************************************************************************************************************
                                                        BASH
*****************************************************************************************************************************

if [[   -f /tmp/foo.txt ]]; then echo "File found!";     fi
if [[ ! -f /tmp/foo.txt ]]; then echo "File not found!"; fi

if [[   -d /tmp/dir ]]; then echo "Dir found!";     fi
if [[ ! -d /tmp/dir ]]; then echo "Dir not found!"; fi

if [[   -z "$VAR" ]]; then echo "VAR is empty!";     fi
if [[ ! -z "$VAR" ]]; then echo "VAR is not empty!"; fi


DIR=some_dir/
echo $(realpath -s $DIR)    # -s   - don't expand symlinks
# output: /tmp/some_dir


--- BASH COLORS -------------------------------------------------------------------------------------------------------------

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'                # No Color
echo -e "${RED}love${NC}"   # -e   - enable interpretation of backslash escapes


*****************************************************************************************************************************
                                                       DOCKER
*****************************************************************************************************************************

docker swarm init --advertise-addr 172.30.1.11

docker swarm join-token manager
docker swarm join-token worker

docker image prune -a


*****************************************************************************************************************************
                                                       MYSQL
*****************************************************************************************************************************

SELECT User, Host FROM mysql.user;

CREATE USER 'username'@'%'         IDENTIFIED BY 'passwrod';
CREATE USER 'username'@'localhost' IDENTIFIED BY 'passwrod';
 
ALTER USER 'username'@'localhost' IDENTIFIED BY 'passwrod';
  -- or
SET PASSWORD FOR 'username'@'localhost' ='passwrod'

SELECT User, Host FROM mysql.user;
 
GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost';
  -- The asterisks in this command refer to the database and table (respectively).
 
FLUSH PRIVILEGES;


// To enable error log add following

[mysqld_safe]
log_error=/var/log/mysql/mysql_error.log
[mysqld]
log_error=/var/log/mysql/mysql_error.log


--- DATABASES AND TABLES ----------------------------------------------------------------------------------------------------

CREATE DATABASE mydb;

-- Truncate table (drop and then re-create again (including any indexes and constraints)
TRUNCATE [TABLE] tbl_name
 
UPDATE mytable SET field1 = newvalue1, field2 = newvalue2 [WHERE Clause];


--- xtrabackup --------------------------------------------------------------------------------------------------------------

xtrabackup --prepare --target-dir=/data/backups/mysql/


*****************************************************************************************************************************
                                                       NETPLAN
*****************************************************************************************************************************

cat /etc/netplan/01-netcfg.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    eno1:
      dhcp4: no
      dhcp6: no
  bridges:
    br0:
      addresses: [10.0.0.101/24]
      gateway4: 10.0.0.254
      interfaces: [eno1]
      nameservers:
        addresses: [10.0.0.1]
        search: [mydomain.net]


*****************************************************************************************************************************
                                                        RUBY
*****************************************************************************************************************************

rvm get stable
rvm install ruby-2.6.1 --without-binary


*****************************************************************************************************************************
                                                      MONGODB
*****************************************************************************************************************************

rs.status();
rs.conf();

rs.initiate( {
   _id : "rs0",
   members: [
      { _id: 0, host: "mongodb0.example.net:27017" },
      { _id: 1, host: "mongodb1.example.net:27017" },
      { _id: 2, host: "mongodb2.example.net:27017" }
   ]
})

rs.add( { host: "mongodb3.example.net:27017", priority: 0, votes: 0 } )

var cfg = rs.conf();
cfg.members[4].priority = 1
cfg.members[4].votes = 1
rs.reconfig(cfg)


*****************************************************************************************************************************
                                                      SYSTEMD
*****************************************************************************************************************************

systemctl daemon-reload
systemctl start name.service


---
